var documenterSearchIndex = {"docs":
[{"location":"apiref/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"apiref/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"apiref/#H2Trees.AggregateMode","page":"API Reference","title":"H2Trees.AggregateMode","text":"AggregateMode <: FarMulMode\n\nThis mode uses AggregatePlan and DisaggregateTranslatePlan to perform the farmultiplication.\n\n\n\n\n\n","category":"type"},{"location":"apiref/#H2Trees.AggregateTranslateMode","page":"API Reference","title":"H2Trees.AggregateTranslateMode","text":"AggregateTranslateMode <: FarMulMode\n\nThis mode uses AggregateTranslatePlan and DisaggregatePlan to perform the farmultiplication.\n\n\n\n\n\n","category":"type"},{"location":"apiref/#H2Trees.ParentUpwardsIterator","page":"API Reference","title":"H2Trees.ParentUpwardsIterator","text":"struct ParentUpwardsIterator{T}\n\nParentUpwardsIterator is an iterator that iterates over all parent nodes of a given node in a tree until the root is reached. The last node is the node 0.\n\nExample\n\nfor node in DepthFirstIterator(tree, root(tree))\n    println(\"Node: \", node)\n    for parent in ParentUpwardsIterator(tree, node)\n        println(\"\t Parent: \", parent)\n    end\nend\n\nFields\n\ntree::T: The tree.\nnode::Int: The node over which parents is iterated.\n\n\n\n\n\n","category":"type"},{"location":"apiref/#H2Trees.LevelIterator-Tuple{Any, Int64}","page":"API Reference","title":"H2Trees.LevelIterator","text":"LevelIterator(tree, level::Int)\n\nReturn an iterator over the nodes at the specified level in the tree.\n\nArguments\n\ntree: The tree object.\nlevel: The level at which to iterate.\n\nReturns\n\nAn iterator over the nodes at the specified level.\n\n\n\n\n\n","category":"method"},{"location":"apiref/#H2Trees.SameLevelIterator-Tuple{Any, Int64}","page":"API Reference","title":"H2Trees.SameLevelIterator","text":"SameLevelIterator(tree, node::Int)\n\nReturns an iterator over the nodes at the same level as node in the tree.\n\nArguments\n\ntree: The tree structure.\nnode: The node for which to find the same level nodes.\n\nReturns\n\nAn iterator over the nodes at the same level as node.\n\n\n\n\n\n","category":"method"},{"location":"apiref/#H2Trees.boundingbox-Union{Tuple{AbstractArray{StaticArraysCore.SVector{D, T}, 1}}, Tuple{T}, Tuple{D}} where {D, T}","page":"API Reference","title":"H2Trees.boundingbox","text":"boundingbox(points::Vector{SVector{D, T}})\n\nReturns halfsize and center of bounding box of points. The halfsize is the half of the length of the edge of the bounding box.\n\n\n\n\n\n","category":"method"},{"location":"apiref/#H2Trees.cornerpoints-Union{Tuple{T}, Tuple{D}, Tuple{N}, Tuple{TwoNTree{N, D, T}, Int64, Any}} where {N, D, T}","page":"API Reference","title":"H2Trees.cornerpoints","text":"cornerpoints(tree::TwoNTree{N,D,T}, node::Int, i)\n\nReturn the corner point of a given node in an N-dimensional TwoNTree.\n\nArguments\n\ntree::TwoNTree{N,D,T}: The tree.\nnode::Int: The index of the node.\ni: The corner point index (1 til 2^N).\n\nReturns\n\nThe corner point coordinates as a SVector.\n\n\n\n\n\n","category":"method"},{"location":"apiref/#H2Trees.findleafnode-Tuple{Any, Int64}","page":"API Reference","title":"H2Trees.findleafnode","text":"findleafnode(tree, value::Int)\n\nFind the leaf node in the given tree that contains the specified value.\n\nArguments\n\ntree: The tree to search in.\nvalue: The value to search for.\n\nReturns\n\nThe leaf node that contains the value, or 0 if not found.\n\n\n\n\n\n","category":"method"},{"location":"apiref/#H2Trees.leveltolevelid-Tuple{Any, Int64}","page":"API Reference","title":"H2Trees.leveltolevelid","text":"leveltolevelid(tree, level::Int)\n\nConverts a level in the tree to its corresponding level ID. This is relevant since the first level might not be level 1.\n\nArguments\n\ntree: The tree object.\nlevel: The level to convert.\n\nReturns\n\nThe level ID corresponding to the given level.\n\n\n\n\n\n","category":"method"},{"location":"apiref/#H2Trees.minimumlevel-Tuple{Any}","page":"API Reference","title":"H2Trees.minimumlevel","text":"minimumlevel(tree)\n\nGet the minimum level of a tree, which is the level of the root node. This is not necessarily the level 1.\n\nArguments\n\ntree: The tree.\n\nReturns\n\nThe minimum level of the tree.\n\n\n\n\n\n","category":"method"},{"location":"apiref/#H2Trees.parentcenterminuschildcenter-Union{Tuple{T}, Tuple{D}, Tuple{N}, Tuple{TwoNTree{N, D, T}, Int64}} where {N, D, T}","page":"API Reference","title":"H2Trees.parentcenterminuschildcenter","text":"parentcenterminuschildcenter(tree::TwoNTree{N,D,T}, child::Int) where {D,T}\n\nCalculate the difference r_p-r_c between the center of the parent r_p and the center of the child node r_c.\n\nArguments\n\ntree::TwoNTree{N,D,T}\nchild::Int: The index of the child node.\n\nReturns\n\nSVector{N,T}: The difference between the center of the parent node and the center of the child node.\n\n\n\n\n\n","category":"method"},{"location":"apiref/#H2Trees.values-Tuple{Any, Int64}","page":"API Reference","title":"H2Trees.values","text":"values(tree, node::Int)\n\nReturns the values stored in the given node of the tree. If the node is a leaf node, it returns the values directly. Otherwise, it recursively collects the values from all the leaf nodes in the subtree rooted at the given node.\n\nArguments\n\ntree: The H2 tree.\nnode::Int: The index of the node.\n\nReturns\n\nAn array of values stored in the given node or its subtree.\n\n\n\n\n\n","category":"method"},{"location":"iterators/samelevel/#Same-Level-Iterator","page":"Same Level Nodes","title":"Same Level Iterator","text":"","category":"section"},{"location":"plans/aggregateplan/#Aggregate-Plan","page":"Aggregate Plan","title":"Aggregate Plan","text":"","category":"section"},{"location":"plans/aggregatetranslateplan/#Aggregate-Translate-Plan","page":"Aggregate Translate Plan","title":"Aggregate Translate Plan","text":"","category":"section"},{"location":"twontree/#TwoNTree","page":"TwoNTree","title":"TwoNTree","text":"","category":"section"},{"location":"iterators/farnode/#Far-Nodes-Iterator","page":"Far Nodes","title":"Far Nodes Iterator","text":"","category":"section"},{"location":"iterators/leaves/#Leaves-Iterator","page":"Leaves","title":"Leaves Iterator","text":"","category":"section"},{"location":"iterators/wellseparated/#Well-Separated-Iterator","page":"Well Separated Nodes","title":"Well Separated Iterator","text":"","category":"section"},{"location":"iterators/wellseparated/#Not-Well-Separated-Iterator","page":"Well Separated Nodes","title":"Not Well Separated Iterator","text":"","category":"section"},{"location":"iterators/wellseparated/#Translating-Iterator","page":"Well Separated Nodes","title":"Translating Iterator","text":"","category":"section"},{"location":"iterators/wellseparated/#Not-Translating-Iterator","page":"Well Separated Nodes","title":"Not Translating Iterator","text":"","category":"section"},{"location":"hybridtree/#Hybrid-Tree","page":"Hybrid Tree","title":"Hybrid Tree","text":"","category":"section"},{"location":"quadpointtree/#Quad-Points-Tree","page":"Quadpoints Tree","title":"Quad Points Tree","text":"","category":"section"},{"location":"plans/disaggregatetranslateplan/#Disaggregate-Translate-Plan","page":"Disaggregate Translate Plan","title":"Disaggregate Translate Plan","text":"","category":"section"},{"location":"iterators/children/#Children-Iterator","page":"Children","title":"Children Iterator","text":"","category":"section"},{"location":"iterators/nearnode/#Near-Node-Iterator","page":"Near Nodes","title":"Near Node Iterator","text":"","category":"section"},{"location":"translations/#Translations","page":"Translations","title":"Translations","text":"","category":"section"},{"location":"#H2Trees","page":"Home","title":"H2Trees","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for H2Trees.","category":"page"},{"location":"plans/disaggregateplan/#Disaggregate-Plan","page":"Disaggregate Plan","title":"Disaggregate Plan","text":"","category":"section"}]
}
